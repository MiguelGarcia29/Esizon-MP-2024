#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct {
    char id_pedido[8];
    char id_prod[8];
    char fecha_devolucion[11];
    char motivo[51];
    char estado[10]; // "pendiente", "aceptado", "denegado", "enviado", "recibido"
    char fecha_aceptacion[11];
    char fecha_caducidad[11];
} Devolucion;

typedef struct {
    char id_pedido[8];
    char id_prod[8];
    int num_unid;
    char fecha_entrega_prevista[11];
    float importe;
    char estado_pedido[15]; // "enPreparación", "enviado", "enReparto", "enLocker", "entregado", "devuelto", "transportista"
    char id_transp[5];
    char id_locker[11];
    char cod_locker[11];
    char fecha_entrega_devolucion_transp[11];
} ProductoPedido;

typedef struct{
    char id_pedido[8];
    char fecha_pedido[11];
    char id_cliente[8];
    char lugar_entrega[10]; // "domicilio" o "locker"
    char id_locker[11];
    char id_cod[11];
} Pedido;

typedef struct{
    char id_cliente[8];
    char nomb_cliente[21];
    char dir_cliente[51];
    char localidad[21];
    char provincia[21];
    char email[31];
    char contrasenia[16];
    float cartera;
} Cliente;

void obtener_fecha_actual(char *fecha_actual) {
    time_t rawtime;
    struct tm *info;
    time(&rawtime);
    info = localtime(&rawtime);
    strftime(fecha_actual, 11, "%d/%m/%Y", info);
}

int pedido_existe(ProductoPedido *pedido, int num_devoluciones, char *id_pedido) {
    for (int i = 0; i < num_devoluciones; i++) {
        if (strcmp(pedido[i].id_pedido, id_pedido) == 0) {
            return 1; // El pedido existe
        }
    }
    return 0; // El pedido no existe
}

int pedido_cliente_existe(Pedido *k, int num, char *id_pedido, char *id_cliente) {
    for (int i = 0; i < num; i++) {
        if (strcmp(k[i].id_pedido, id_pedido) == 0 && strcmp(k[i].id_cliente, id_cliente) == 0) {
            return 1; // El pedido existe
        }
    }
    return 0; // El pedido no existe
}

int producto_en_pedido(ProductoPedido *p, int tamanio_pedido, char *id_pedido, char *id_producto)
{
	for (int i = 0; i < tamanio_pedido; i++) {
        if (strcmp(p[i].id_pedido, id_pedido) == 0 && strcmp(p[i].id_prod, id_producto) == 0) 
		{
            return 1; // El pedido existe
        }
    }
    return 0; // El pedido no existe
}

void alta_devolucion_admin(Devolucion *devoluciones, int *num_devoluciones) {
    char id_pedido[8];
    printf("\nIngrese el ID del pedido: ");
    scanf("%s", id_pedido);
    
    int rastreo1 = pedido_existe(devoluciones, *num_devoluciones, id_pedido);
    if (rastreo1 == 1) {
        Devolucion nueva_devolucion;
        strcpy(nueva_devolucion.id_pedido, id_pedido);
        printf("Ingrese el ID del producto: ");
        scanf("%s", nueva_devolucion.id_prod);
        obtener_fecha_actual(nueva_devolucion.fecha_devolucion);
        printf("Ingrese el motivo de la devolución: ");
        scanf(" %[^\n]", nueva_devolucion.motivo);
        strcpy(nueva_devolucion.estado, "pendiente");

        devoluciones = (Devolucion*)realloc(devoluciones, (*num_devoluciones + 1) * sizeof(Devolucion));
        if (devoluciones == NULL) {
            printf("Error al asignar memoria.\n");
            exit(EXIT_FAILURE);
        }

        devoluciones[*num_devoluciones] = nueva_devolucion;
        (*num_devoluciones)++;
    } else {
        printf("El pedido no ha sido encontrado o no existe.\n");
    }
}

void alta_devolucion_cliente(Devolucion *devoluciones, int *num_devoluciones, Cliente actual) {
    char id_pedido[8];
    printf("\nIngrese el ID del pedido: ");
    scanf("%s", id_pedido);
    
    int rastreo1 = pedido_existe(devoluciones, *num_devoluciones, id_pedido);
    if (rastreo1 == 1) {
        Devolucion nueva_devolucion;
        strcpy(nueva_devolucion.id_pedido, id_pedido);
        printf("Ingrese el ID del producto: ");
        scanf("%s", nueva_devolucion.id_prod);
        obtener_fecha_actual(nueva_devolucion.fecha_devolucion);
        printf("Ingrese el motivo de la devolución: ");
        scanf(" %[^\n]", nueva_devolucion.motivo);
        strcpy(nueva_devolucion.estado, "pendiente");

        devoluciones = (Devolucion*)realloc(devoluciones, (*num_devoluciones + 1) * sizeof(Devolucion));
        if (devoluciones == NULL) {
            printf("Error al asignar memoria.\n");
            exit(EXIT_FAILURE);
        }

        devoluciones[*num_devoluciones] = nueva_devolucion;
        (*num_devoluciones)++;
    } else {
        printf("El pedido no ha sido encontrado o no existe.\n");
    }
}

void baja_devolucion(Devolucion *devoluciones, int *num_devoluciones, char *id_devolucion) {
    int encontrado = 0;
    for (int i = 0; i < *num_devoluciones; i++) {
        if (strcmp(devoluciones[i].id_pedido, id_devolucion) == 0) {
            for (int j = i; j < *num_devoluciones - 1; j++) {
                devoluciones[j] = devoluciones[j + 1];
            }
            encontrado = 1;
            (*num_devoluciones)--;
            printf("Devolución con ID %s eliminada correctamente.\n", id_devolucion);
            break;
        }
    }
    if (!encontrado) {
        printf("Devolución con ID %s no encontrada.\n", id_devolucion);
    }
}

void buscar_devolucion(Devolucion *devoluciones, int num_devoluciones, char *id_devolucion) {
    // Buscar la devolución con el ID dado
    int encontrado = 0;
    for (int i = 0; i < num_devoluciones; i++) {
        if (strcmp(devoluciones[i].id_pedido, id_devolucion) == 0) {
            printf("ID del pedido: %s\n", devoluciones[i].id_pedido);
            printf("ID del producto: %s\n", devoluciones[i].id_prod);
            printf("Fecha de devolución: %s\n", devoluciones[i].fecha_devolucion);
            printf("Motivo: %s\n", devoluciones[i].motivo);
            printf("Estado: %s\n", devoluciones[i].estado);
            encontrado = 1;
            break;
        }
    }
    if (!encontrado) {
        printf("Devolución con ID %s no encontrada.\n", id_devolucion);
    }
}

void listar_devoluciones(Devolucion *devoluciones, int num_devoluciones) {
    printf("\nListado de Devoluciones:\n");
    for (int i = 0; i < num_devoluciones; i++) {
       printf("%s-%s-%s-%s-%s\n", devoluciones[i].id_pedido,devoluciones[i].id_prod,devoluciones[i].fecha_devolucion,devoluciones[i].motivo,devoluciones[i].estado);
    }
}

void devoluciones_pendientes(Devolucion *devoluciones, int num_devoluciones) {
    printf("\nDevoluciones Pendientes de Aceptación:\n");
    for (int i = 0; i < num_devoluciones; i++) {
        if (strcmp(devoluciones[i].estado, "pendiente") == 0) {
            printf("%s-%s-%s-%s\n",
                   devoluciones[i].id_pedido, devoluciones[i].id_prod, devoluciones[i].fecha_devolucion,
                   devoluciones[i].motivo);
        }
    }
}

void modificar_estado_enviado(Devolucion *devoluciones, int num_devoluciones, char *id_devolucion) {
    for (int i = 0; i < num_devoluciones; i++) {
        if (strcmp(devoluciones[i].id_pedido, id_devolucion) == 0) {
            strcpy(devoluciones[i].estado, "enviado");
            printf("Estado de la devolución con ID %s cambiado a 'enviado'.\n", id_devolucion);
            break;
        }
    }
}

int main() {
    Devolucion *devoluciones = NULL;
    
    Cliente actual;
    strcpy(actual.id_cliente, "0000002");
    int num_devoluciones = 0;
    int opcion;
    int usu;
	char id[8];
    do {
        printf("\nMenú de Opciones:\n");
        printf("1. Alta de Devolución\n");
        printf("2. Baja de Devolución\n");
        printf("3. Buscar Devolución\n");
        printf("4. Listar Devoluciones\n");
        printf("5. Devoluciones Pendientes de Aceptación\n");
        printf("6. Modificar Estado a 'Enviado'\n");
        printf("7. Salir\n");
        printf("Elige una opción: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
            	printf("Dime si eres admin o usuario: 1-Admin 2-Cliente \n");
            	scanf("%d", &usu);
            	if(usu==1)
            	{
            		alta_devolucion_admin(devoluciones, &num_devoluciones);
				}
				else
				{
					printf("Dime el id de usuario: ");
					scanf("%s", id);
					alta_devolucion_cliente(devoluciones, &num_devoluciones, actual);
				}
                break;
            case 2:
                if (num_devoluciones > 0) {
                    char id_baja[8];
                    printf("\nIngrese el ID de la devolución a dar de baja: ");
                    scanf("%s", id_baja);
                    baja_devolucion(devoluciones, &num_devoluciones, id_baja);
                } else {
                    printf("No hay devoluciones para dar de baja.\n");
                }
                break;
            case 3:
                if (num_devoluciones > 0) {
                    char id_busqueda[8];
                    printf("\nIngrese el ID de la devolución a buscar: ");
                    scanf("%s", id_busqueda);
                    buscar_devolucion(devoluciones, num_devoluciones, id_busqueda);
                } else {
                    printf("No hay devoluciones para buscar.\n");
                }
                break;
            case 4:
                if (num_devoluciones > 0) {
                    listar_devoluciones(devoluciones, num_devoluciones);
                } else {
                    printf("No hay devoluciones para listar.\n");
                }
                break;
            case 5:
                if (num_devoluciones > 0) {
                    devoluciones_pendientes(devoluciones, num_devoluciones);
                } else {
                    printf("No hay devoluciones pendientes de aceptación.\n");
                }
                break;
            case 6:
                if (num_devoluciones > 0) {
                    char id_enviado[8];
                    printf("\nIngrese el ID de la devolución a marcar como 'enviado': ");
                    scanf("%s", id_enviado);
                    modificar_estado_enviado(devoluciones, num_devoluciones, id_enviado);
                } else {
                    printf("No hay devoluciones para marcar como 'enviado'.\n");
                }
                break;
            case 7:
                printf("Saliendo del programa.\n");
                break;
            default:
                printf("Opción no válida. Por favor, seleccione una opción válida.\n");
                break;
        }
    } while (opcion != 7);

    // Liberar memoria dinámica
    free(devoluciones);

    return 0;
}
