#include <stdio.h>
#include <string.h>

typedef struct {
    char id_locker[21]; 
    char localidad[21];
    char provincia[21];
    char ubicacion[21];
    int num_compt; // Cambiado para representar el número máximo de lockers
    int num_compocup;
} Locker;

int num_compt=15;// Definir un valor máximo para el número de lockers

Locker lockers[15];
int num_compocup = 0;
int id_counter = 1; // Inicializar el contador de ID

// Función para dar de alta un nuevo locker
void altaLocker(const char *localidad, const char *provincia, const char *ubicacion) {
    if (num_compocup < num_compt) { // Verificar si se ha alcanzado el límite de lockers
        // Generar el ID del locker con el formato "001", "002", etc.
        sprintf(lockers[num_compocup].id_locker, "%03d", id_counter++);
        
        strcpy(lockers[num_compocup].localidad, localidad);
        strcpy(lockers[num_compocup].provincia, provincia);
        strcpy(lockers[num_compocup].ubicacion, ubicacion);
        lockers[num_compocup].num_compt = 1; // Cambiado para representar un solo compartimento
        lockers[num_compocup].num_compocup = 0; // Inicialmente, ningún compartimento ocupado
        num_compocup++;
        printf("Locker dado de alta correctamente.\n");
    } else {
        printf("No se pueden agregar más lockers, se ha alcanzado el límite máximo.\n");
    }
}

// Función para buscar un locker por su ID
int buscarLocker(const char *id) {
    for (int i = 0; i < num_compocup; i++) {
        if (strcmp(lockers[i].id_locker, id) == 0) {
            return i;
        }
    }
    return -1; // Si no se encuentra el locker
}

// Función para eliminar un locker por su ID
void borrarLocker(const char *id) {
    int indice = buscarLocker(id);
    if (indice != -1) {
        // Mover los lockers restantes para llenar el espacio
        for (int i = indice; i < num_compocup - 1; i++) {
            lockers[i] = lockers[i + 1];
        }
        num_compocup--;
        printf("Locker con ID %s eliminado correctamente.\n", id);
    } else {
        printf("No se encontró ningún locker con el ID %s.\n", id);
    }
}

// Función para acceder a la información de un locker por su ID
void accederInfoLocker(const char *id) {
    int indice = buscarLocker(id);
    if (indice != -1) {
        printf("Locker%s-%s-%s-%s-%d-%d\n", lockers[indice].id_locker, lockers[indice].localidad, lockers[indice].provincia, lockers[indice].ubicacion, lockers[indice].num_compt, lockers[indice].num_compocup);
    } else {
        printf("No se encontró ningún locker con el ID %s.\n", id);
    }
}

int main() {
    int opcion;
    char localidad[21], provincia[21], ubicacion[21], id[4];
    
    do {
        printf("\n--- Menú de opciones ---\n");
        printf("1. Dar de alta un nuevo locker\n");
        printf("2. Borrar un locker\n");
        printf("3. Acceder a la información de un locker\n");
        printf("4. Salir\n");
        printf("Ingrese su opción: ");
        scanf("%d", &opcion);
        
        switch (opcion) {
            case 1:
                printf("Ingrese la localidad: ");
                scanf("%s", localidad);
                printf("Ingrese la provincia: ");
                scanf("%s", provincia);
                printf("Ingrese la ubicación: ");
                scanf("%s", ubicacion);
                altaLocker(localidad, provincia, ubicacion);
                break;
            case 2:
                printf("Ingrese el ID del locker a borrar: ");
                scanf("%s", id);
                borrarLocker(id);
                break;
            case 3:
                printf("Ingrese el ID del locker del que desea acceder a la información: ");
                scanf("%s", id);
                accederInfoLocker(id);
                break;
            case 4:
                printf("Saliendo del programa.\n");
                break;
            default:
                printf("Opción inválida. Por favor, seleccione una opción válida.\n");
                break;
        }
    } while (opcion != 4);

    return 0;
}
